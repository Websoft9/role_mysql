#1 prepare for installation
- name: Install PyMySQL for Ansible MySQL Module
  pip:
    name: PyMySQL

- block:
  - name: Check mysql version support of OS
    fail: msg="The mysql version is not supported on this OS, exit!"
    when: mysql_version not in mysql_support_version[ansible_os_family][ansible_distribution_major_version]
    
#2 install by OS family    
  - include: "{{ansible_os_family}}.yml"
  when: not mysql_docker
  
#3 configure
- name: Copy the script that gets the MySQL port
  template:
    src: mysql_port_get.sh
    dest: /tmp/mysql_port_get.sh

- name: Get mysql port 
  shell: bash /tmp/mysql_port_get.sh
  register: mysql_port

- debug: var=mysql_port.stdout

- name: Gets all container names
  shell: docker ps | awk '{print $NF}' | sed 1d |sort
  register: container_list_name

- block:
  - name: Create mysql dir
    file:
      path: "{{item}}" 
      state: directory
      recurse: yes
    loop: 
      - /data/db/mysql{{mysql_version}}/data

  - name: Create mysql file
    file:
      path: "{{item}}" 
      state: touch
    loop: 
      - /data/db/mysql{{mysql_version}}/data/my.cnf

  - name: Copy docker-compose file
    template:
      src: docker-compose.yml
      dest: /data/db/mysql{{mysql_version}}/docker-compose.yml

  - name: Install Container version of MySQL
    shell: |
      docker-compose up -d
      sleep 30
    args:
      chdir: /data/db/mysql{{mysql_version}}
  when: mysql_docker 

- name: Get the MySQL Container IP
  shell: docker inspect mysql{{mysql_version}} |jq -r .[].NetworkSettings.Networks.apps.IPAddress 
  register: mysql_container_ip

- debug: var=mysql_container_ip.stdout

- name: Create MySQL extra databases 
  mysql_db:
    login_user: root
    login_host: "{{ item.host |default('127.0.0.1',true) }}"
    login_password: '{{mysql_root_password}}'
    login_port: "{{ mysql_port.stdout }}"
    name: "{{ item.name }}"
    encoding: "{{ item.encoding | default('utf8mb4',true) }}"
    collation: "{{ item.collation | default('utf8mb4_general_ci',true) }}"
    state: "{{ item.state | default('present',true) }}"
  with_items: "{{ mysql_databases }}"
  when: (mysql_databases is defined) and (mysql_databases != none)

- name: Create extra Databases User
  mysql_user:
    login_user: root
    login_host: "{{ item.host |default('127.0.0.1',true) }}"
    login_password: '{{mysql_root_password}}'
    login_port: "{{ mysql_port.stdout }}"
    name: "{{ item.name }}"
    host: "{{ item.host | default('%',true) }}"
    password: "{{ item.password | default('123456',true) }}"
    priv: "{{ item.priv | default('*.*:USAGE',true) }}"
    sql_log_bin: "{{ item.sql_log_bin | default('yes',true) }}"
  with_items: "{{ mysql_users }}"
  when: (mysql_users is defined) and (mysql_users != none)

- block:
  - name: Stop MySQL
    shell: systemctl stop mysql
    
  - name: MySQL5.5 need delelte ib_logfile
    shell: rm -rf /var/lib/mysql/ib_logfile*
    when: mysql_version == '5.5'
    
  - name: Change MySQL configuration default
    lineinfile:
      dest: /etc/my.cnf
      regexp: '^{{ item.name }} = *'
      insertafter: '\[mysqld\]'
      firstmatch: yes
      line: "{{ item.name }} = {{item.value}}"
    with_items: "{{ mysql_configuration_default }}"
    when: mysql_configuration_default is defined and mysql_configuration_default != none

  - name: Change MySQL configuration extras
    lineinfile:
      dest: /etc/my.cnf
      regexp: '^{{ item.name }} = *'
      insertafter: '\[mysqld\]'
      firstmatch: yes
      line: "{{ item.name }} = {{item.value}}"
    with_items: "{{ mysql_configuration_extras }}"
    when: (mysql_configuration_extras is defined) and (mysql_configuration_extras != none)
    
  - name: Restart MySQL
    shell: systemctl restart mysql

  # display version and service state of components
  - name: Get MySQL version
    shell: sudo sh -c "mysql -V 1>> /data/logs/install_version.txt"

  - name: Check MySQL Service
    shell: systemctl status mysql | grep Active*
    register: check_mysql_service
    notify: check_mysql_service

  #Enable remote connection
  - import_tasks: remote.yml
    when: mysql_remote
  when: not mysql_docker
